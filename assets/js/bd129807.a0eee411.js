"use strict";(self.webpackChunkgravitykit_docs=self.webpackChunkgravitykit_docs||[]).push([[55747],{3905:(e,t,i)=>{i.d(t,{Zo:()=>d,kt:()=>h});var a=i(67294);function n(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function r(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,a)}return i}function l(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?r(Object(i),!0).forEach((function(t){n(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):r(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function o(e,t){if(null==e)return{};var i,a,n=function(e,t){if(null==e)return{};var i,a,n={},r=Object.keys(e);for(a=0;a<r.length;a++)i=r[a],t.indexOf(i)>=0||(n[i]=e[i]);return n}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)i=r[a],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(n[i]=e[i])}return n}var s=a.createContext({}),p=function(e){var t=a.useContext(s),i=t;return e&&(i="function"==typeof e?e(t):l(l({},t),e)),i},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var i=e.components,n=e.mdxType,r=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),m=p(i),c=n,h=m["".concat(s,".").concat(c)]||m[c]||u[c]||r;return i?a.createElement(h,l(l({ref:t},d),{},{components:i})):a.createElement(h,l({ref:t},d))}));function h(e,t){var i=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=i.length,l=new Array(r);l[0]=c;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[m]="string"==typeof e?e:n,l[1]=o;for(var p=2;p<r;p++)l[p]=i[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,i)}c.displayName="MDXCreateElement"},51503:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>p});var a=i(87462),n=(i(67294),i(3905));const r={id:"5735f3e8c69791069900c3ef",number:"350",collectionId:"566dfabbc6979143615564bf",popularity:"0.9",publicUrl:"https://docs.gravitykit.com/article/350-merge-tag-modifiers",viewCount:"4757",lastPublishedAt:"2022-11-23T22:26:05Z",changeOrigin:"unknown",name:"Merge Tag modifiers",slug:"350-merge-tag-modifiers",status:"published",categories:["566dfe9bc6979143615564df"],keywords:["merge tags","merge tag","modifier","wpautop","limit words","shorten","character limit","max characters","max number of words","esc_html","sanitize","sanitize_css_class","safe html"],related:["54c67bbbe4b051242988551d"],createdBy:"59634",createdAt:"2016-05-13T15:34:00Z",updatedBy:"80506",updatedAt:"2022-11-23T22:26:05Z",title:"Merge Tag modifiers",hsEditUrl:"https://secure.helpscout.net/docs/566dfabbc6979143615564bf/article/5735f3e8c69791069900c3ef",pagination_prev:null,pagination_next:null,last_update:{date:new Date("2022-11-23T22:26:05.000Z"),author:"Rafael Ehlers"}},l="Merge Tag modifiers",o={unversionedId:"gravity-forms-add-ons/gravityview/merge-tags/5735f3e8c69791069900c3ef",id:"gravity-forms-add-ons/gravityview/merge-tags/5735f3e8c69791069900c3ef",title:"Merge Tag modifiers",description:"GravityView heavily uses Gravity Forms Merge Tags; they're very powerful.",source:"@site/docs/gravity-forms-add-ons/gravityview/merge-tags/350-merge-tag-modifiers.mdx",sourceDirName:"gravity-forms-add-ons/gravityview/merge-tags",slug:"/gravity-forms-add-ons/gravityview/merge-tags/350-merge-tag-modifiers",permalink:"/Docs/gravity-forms-add-ons/gravityview/merge-tags/350-merge-tag-modifiers",draft:!1,editUrl:"https://github.com/GravityKit/Docs/tree/main/docs/gravity-forms-add-ons/gravityview/merge-tags/350-merge-tag-modifiers.mdx",tags:[],version:"current",sidebarPosition:350,frontMatter:{id:"5735f3e8c69791069900c3ef",number:"350",collectionId:"566dfabbc6979143615564bf",popularity:"0.9",publicUrl:"https://docs.gravitykit.com/article/350-merge-tag-modifiers",viewCount:"4757",lastPublishedAt:"2022-11-23T22:26:05Z",changeOrigin:"unknown",name:"Merge Tag modifiers",slug:"350-merge-tag-modifiers",status:"published",categories:["566dfe9bc6979143615564df"],keywords:["merge tags","merge tag","modifier","wpautop","limit words","shorten","character limit","max characters","max number of words","esc_html","sanitize","sanitize_css_class","safe html"],related:["54c67bbbe4b051242988551d"],createdBy:"59634",createdAt:"2016-05-13T15:34:00Z",updatedBy:"80506",updatedAt:"2022-11-23T22:26:05Z",title:"Merge Tag modifiers",hsEditUrl:"https://secure.helpscout.net/docs/566dfabbc6979143615564bf/article/5735f3e8c69791069900c3ef",pagination_prev:null,pagination_next:null,last_update:{date:"2022-11-23T22:26:05.000Z",author:"Rafael Ehlers"}},sidebar:"gravityview"},s={},p=[{value:"GravityView Modifiers:",id:"gravityview-modifiers",level:3},{value:"Modifiers added in GravityView 2.0:",id:"modifiers-added-in-gravityview-20",level:3},{value:"Usage: <code>:esc_html</code> modifier",id:"usage-esc_html-modifier",level:3},{value:"Usage: <code>:sanitize_html_class</code> modifier",id:"usage-sanitize_html_class-modifier",level:3},{value:"Usage: <code>:sanitize_title</code> modifier",id:"usage-sanitize_title-modifier",level:3},{value:"Usage: <code>:wpautop</code> modifier",id:"usage-wpautop-modifier",level:3},{value:"Usage: <code>:maxwords:{number}</code> modifier",id:"usage-maxwordsnumber-modifier",level:3},{value:"Notes:",id:"notes",level:4},{value:"Usage: <code>:timestamp</code> modifier",id:"usage-timestamp-modifier",level:3},{value:"Notes:",id:"notes-1",level:4},{value:"Using multiple modifiers at a time",id:"using-multiple-modifiers-at-a-time",level:3}],d={toc:p},m="wrapper";function u(e){let{components:t,...i}=e;return(0,n.kt)(m,(0,a.Z)({},d,i,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"merge-tag-modifiers"},"Merge Tag modifiers"),(0,n.kt)("p",null,"GravityView heavily uses ",(0,n.kt)("a",{parentName:"p",href:"https://docs.gravityforms.com/category/user-guides/merge-tags-getting-started/"},"Gravity Forms Merge Tags"),"; they're very powerful."),(0,n.kt)("p",null,'To enhance Merge Tags, GravityView adds additional "modifiers" that allow you to format Merge Tags differently.'),(0,n.kt)("h3",{id:"gravityview-modifiers"},"GravityView Modifiers:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},":wpautop")," - Runs wpautop() on the output"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},":maxwords:{number}")," - Limit output to ",(0,n.kt)("inlineCode",{parentName:"li"},"{number}")," of words"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},":timestamp")," - Convert Date field to a ",(0,n.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Unix_time"},"timestamp"))),(0,n.kt)("h3",{id:"modifiers-added-in-gravityview-20"},"Modifiers added in GravityView 2.0:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},":esc_html")," - Make field output safe to use in HTML attributes; runs ",(0,n.kt)("inlineCode",{parentName:"li"},"esc_html()")," on the output"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},":sanitize_html_class")," - Runs ",(0,n.kt)("inlineCode",{parentName:"li"},"sanitize_html_class()")," on the output"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},":sanitize_title")," - Runs ",(0,n.kt)("inlineCode",{parentName:"li"},"sanitize_title()")," on the output")),(0,n.kt)("p",null,"Note: These modifiers will not be processed on ",(0,n.kt)("inlineCode",{parentName:"p"},"{all_fields}")," Merge Tags."),(0,n.kt)("hr",null),(0,n.kt)("h3",{id:"usage-esc_html-modifier"},"Usage: ",(0,n.kt)("inlineCode",{parentName:"h3"},":esc_html")," modifier"),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"esc_html")," modifier runs the output of the field through ",(0,n.kt)("a",{parentName:"p",href:"https://developer.wordpress.org/reference/functions/esc_html/"},"the ",(0,n.kt)("inlineCode",{parentName:"a"},"esc_html()")," function in WordPress"),"."),(0,n.kt)("p",null,"Before, you weren't able to use Merge Tags when generating HTML. This modifier makes field output safe for HTML, and allows you to use Merge Tags inside HTML attributes safely."),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"{Business Name:2}")," is ",(0,n.kt)("inlineCode",{parentName:"p"},'The "World&#39;s Best" Astronaut Ice Cream')),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Before:")),(0,n.kt)("p",null,"Without the Merge Tag modifier, you would use this code:"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},'<a href="{Website:3}" title="Go to the {Business Name:2} website">{Business Name:2}</a>')),(0,n.kt)("p",null,"And the output would be broken HTML:"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},'<a href="{Website:3}" title="Go to the The "World&#39;s Best" Astronaut Ice Cream website">The "World&#39;s Best" Astronaut Ice Cream</a>')),(0,n.kt)("p",null,"Notice the extra double quotes inside the HTML tag? That is broken HTML."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"After:")),(0,n.kt)("p",null,"Let's update the example to use the ",(0,n.kt)("inlineCode",{parentName:"p"},":esc_html")," modifier:"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},'<a href="{Website:3}" title="Go to the {Business Name:2:esc_html} website">{Business Name:2:esc_html}</a>')),(0,n.kt)("p",null,"The output is now valid HTML, with the quotes converted to HTML entities:"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},'<a href="{Website:3}" title="Go to the The "World&#039;s Best" Astronaut Ice Cream website">The "World&#039;s Best" Astronaut Ice Cream</a>')),(0,n.kt)("hr",null),(0,n.kt)("h3",{id:"usage-sanitize_html_class-modifier"},"Usage: ",(0,n.kt)("inlineCode",{parentName:"h3"},":sanitize_html_class")," modifier"),(0,n.kt)("p",null,"This modifier is perfect for making sure the field values are valid CSS class names. Use it inside your HTML, like so:"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},'<div class="{Category:5:sanitize_html_class}">[...]')),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"sanitize_html_class")," modifier runs the field output through the ",(0,n.kt)("inlineCode",{parentName:"p"},"gravityview_sanitize_html_class()")," function, which is very similar to the ",(0,n.kt)("inlineCode",{parentName:"p"},"sanitize_html_class()")," WordPress function, except the WordPress function, does not allow spaces (multiple CSS classes), and GravityView does."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Before:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Merge Tag: ",(0,n.kt)("inlineCode",{parentName:"li"},"{Your Profession:5}")),(0,n.kt)("li",{parentName:"ul"},"Value: ",(0,n.kt)("inlineCode",{parentName:"li"},"Scientist, Astronaut!"))),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"After:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Merge Tag: ",(0,n.kt)("inlineCode",{parentName:"li"},"{Your Profession:5:sanitize_html_class}")),(0,n.kt)("li",{parentName:"ul"},"Value: ",(0,n.kt)("inlineCode",{parentName:"li"},"Scientist Astronaut"))),(0,n.kt)("hr",null),(0,n.kt)("h3",{id:"usage-sanitize_title-modifier"},"Usage: ",(0,n.kt)("inlineCode",{parentName:"h3"},":sanitize_title")," modifier"),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"sanitize_title")," modifier runs the field output through the ",(0,n.kt)("inlineCode",{parentName:"p"},"santitize_title()")," WordPress function."),(0,n.kt)("p",null,"This is convenient for adding standardized attributes to HTML tags."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Before:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Merge Tag: ",(0,n.kt)("inlineCode",{parentName:"li"},"{Your Profession:5}")),(0,n.kt)("li",{parentName:"ul"},"Value: ",(0,n.kt)("inlineCode",{parentName:"li"},"Scientist, Astronaut!"))),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"After:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Merge Tag: ",(0,n.kt)("inlineCode",{parentName:"li"},"{Your Profession:5:sanitize_title}")),(0,n.kt)("li",{parentName:"ul"},"Value: ",(0,n.kt)("inlineCode",{parentName:"li"},"scientist-astronaut"))),(0,n.kt)("h3",{id:"usage-wpautop-modifier"},"Usage: ",(0,n.kt)("inlineCode",{parentName:"h3"},":wpautop")," modifier"),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"wpautop")," modifier changes double line breaks in the text into HTML paragraphs (",(0,n.kt)("inlineCode",{parentName:"p"},"<p>...</p>"),") and single line-breaks are converted to HTML ",(0,n.kt)("inlineCode",{parentName:"p"},"<br />"),". Line breaks within the script and style sections are not affected."),(0,n.kt)("p",null,"This modifier will run the ",(0,n.kt)("a",{parentName:"p",href:"https://codex.wordpress.org/Function_Reference/wpautop"},"wpautop()")," function on the Merge Tag's content. ",(0,n.kt)("a",{parentName:"p",href:"https://codex.wordpress.org/Function_Reference/wpautop"},"Learn more on WordPress.org"),"."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Before:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Merge Tag: ",(0,n.kt)("inlineCode",{parentName:"li"},"{Cosmonaut:4}")),(0,n.kt)("li",{parentName:"ul"},"Output: ",(0,n.kt)("inlineCode",{parentName:"li"},"The Earth was small and light blue."))),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"After:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Merge Tag: ",(0,n.kt)("inlineCode",{parentName:"li"},"{Cosmonaut:4:wpautop}")),(0,n.kt)("li",{parentName:"ul"},"Output: ",(0,n.kt)("inlineCode",{parentName:"li"},"<p>The Earth was small and light blue.</p>"))),(0,n.kt)("hr",null),(0,n.kt)("h3",{id:"usage-maxwordsnumber-modifier"},"Usage: ",(0,n.kt)("inlineCode",{parentName:"h3"},":maxwords:{number}")," modifier"),(0,n.kt)("p",null,"Limits the length of displayed field content to ",(0,n.kt)("inlineCode",{parentName:"p"},"{number}")," words."),(0,n.kt)("p",null,'When the content length exceeds the number of words, "\u2026" will be appended to the text. Example: "The text is too long" becomes "The text\u2026".'),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"How to display the first 10 words of a testimonial.")),(0,n.kt)("p",null,'We have a form named "Testimonial", where we gather customer feedback. It has a textarea field called "Quote", and it has the field ID of "12".'),(0,n.kt)("p",null,"To display the content in GravityView, we normally us the ",(0,n.kt)("inlineCode",{parentName:"p"},"{Quote:12}")," Merge Tag. The full quote is too long, though:"),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"I really enjoyed the service that I received. Thank you for all your help! In the future, I will have no reservations about referring people to your business. Thanks again! ",(0,n.kt)("em",{parentName:"p"},"That quote has 30 words.")," We only want to show the first 10 words so the content fits nicely in our heading. We can use the ",(0,n.kt)("inlineCode",{parentName:"p"},"maxwords")," modifier to limit the number of words.")),(0,n.kt)("p",null,"We can add the ",(0,n.kt)("inlineCode",{parentName:"p"},"maxwords"),' "modifier" to the end of the Merge Tag, along with the max number of words we want: ',(0,n.kt)("inlineCode",{parentName:"p"},":maxwords:10"),". The final Merge Tag looks like ",(0,n.kt)("inlineCode",{parentName:"p"},"{Quote:12:maxwords:10}"),"."),(0,n.kt)("p",null,"Here's the output from the ",(0,n.kt)("inlineCode",{parentName:"p"},"{Quote:12:maxwords:10}")," Merge Tag:"),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"I really enjoyed the service that I received. Thank you\u2026")),(0,n.kt)("h4",{id:"notes"},"Notes:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Commas, periods, etc, connected to the final word of the value will be preserved. ",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"If you set ",(0,n.kt)("inlineCode",{parentName:"li"},"maxwords:3")," on this value: ",(0,n.kt)("inlineCode",{parentName:"li"},"Example with comma, to be trimmed"),", the output would be ",(0,n.kt)("inlineCode",{parentName:"li"},"Example with comma,&hellip;")))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("em",{parentName:"li"},"HTML tags are preserved")," Whitespace between tags will make an HTML tag be considered a separate word: ",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"<p> <strong>Example</strong></p>")," Will be considered two words because there is a space between ",(0,n.kt)("inlineCode",{parentName:"li"},"<p>")," and ",(0,n.kt)("inlineCode",{parentName:"li"},"<strong>"),"."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"<p><strong>Example</strong></p>")," Will be considered one word."))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("em",{parentName:"li"},"HTML entities are allowed")," If they are separated by word breaks, they will be counted as words: ",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"Foo & Bar")," will be considered three words because ",(0,n.kt)("inlineCode",{parentName:"li"},"&")," is separate"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"Foo& Bar")," will be considered two words because ",(0,n.kt)("inlineCode",{parentName:"li"},"&")," is connected to ",(0,n.kt)("inlineCode",{parentName:"li"},"Foo")))),(0,n.kt)("li",{parentName:"ul"},'When the text is truncated, "\u2026" is appended to the output, using HTML entity ',(0,n.kt)("inlineCode",{parentName:"li"},"&hellip;"))),(0,n.kt)("hr",null),(0,n.kt)("h3",{id:"usage-timestamp-modifier"},"Usage: ",(0,n.kt)("inlineCode",{parentName:"h3"},":timestamp")," modifier"),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"timestamp")," modifier converts valid dates into a timestamp (the number of seconds since the Unix Epoch, January 1 1970 00:00:00 GMT). This is helpful for use in combination with the ",(0,n.kt)("inlineCode",{parentName:"p"},"[gvlogic]")," shortcode."),(0,n.kt)("p",null,"This modifier will run the ",(0,n.kt)("a",{parentName:"p",href:"http://php.net/manual/en/function.strtotime.php"},"strtotime()")," function on the Merge Tag's content. If not a valid format, the value will be returned as ",(0,n.kt)("inlineCode",{parentName:"p"},"-1"),"."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Before:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Merge Tag: ",(0,n.kt)("inlineCode",{parentName:"li"},"{Date:3}")),(0,n.kt)("li",{parentName:"ul"},"Output: ",(0,n.kt)("inlineCode",{parentName:"li"},"07/07/2003"))),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"After:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Merge Tag: ",(0,n.kt)("inlineCode",{parentName:"li"},"{Date:3:timestamp}")),(0,n.kt)("li",{parentName:"ul"},"Output: ",(0,n.kt)("inlineCode",{parentName:"li"},"1057547880"))),(0,n.kt)("p",null,"It will work with any format for the Date field ( ",(0,n.kt)("inlineCode",{parentName:"p"},"mm/dd/yyyy"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"yyyy-dd-mm"),", and everything in between):"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Before:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Merge Tag: ",(0,n.kt)("inlineCode",{parentName:"li"},"{Text Field With Parseable Date:6}")),(0,n.kt)("li",{parentName:"ul"},"Output: ",(0,n.kt)("inlineCode",{parentName:"li"},"July 14, 2015, 11:49 GMT"))),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"After:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Merge Tag: ",(0,n.kt)("inlineCode",{parentName:"li"},"{Text Field With Parseable Date:6:timestamp}")),(0,n.kt)("li",{parentName:"ul"},"Output: ",(0,n.kt)("inlineCode",{parentName:"li"},"1436874540"))),(0,n.kt)("h4",{id:"notes-1"},"Notes:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"The ",(0,n.kt)("inlineCode",{parentName:"li"},"timestamp")," modifier is designed to work with Date fields, but it will work for any field, as long as the value is formatted in a way that is parsed by PHP's ",(0,n.kt)("a",{parentName:"li",href:"http://php.net/manual/en/function.strtotime.php"},"strtotime()")," function.")),(0,n.kt)("h3",{id:"using-multiple-modifiers-at-a-time"},"Using multiple modifiers at a time"),(0,n.kt)("p",null,"You can combine multiple modifiers by separating them with commas. ",(0,n.kt)("strong",{parentName:"p"},"Be sure to use GravityView's modifiers first, then Gravity Forms'.")),(0,n.kt)("p",null,"For example, if you want to use ",(0,n.kt)("inlineCode",{parentName:"p"},"wpautop")," but you also want to URL-encode the output, you would write it like this: ",(0,n.kt)("inlineCode",{parentName:"p"},"{Field:1:wpautop,urlencode}")))}u.isMDXComponent=!0}}]);