"use strict";(self.webpackChunkgravitykit_docs=self.webpackChunkgravitykit_docs||[]).push([[76675],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>y});var r=a(67294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function n(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?n(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):n(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,r,i=function(e,t){if(null==e)return{};var a,r,i={},n=Object.keys(e);for(r=0;r<n.length;r++)a=n[r],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(r=0;r<n.length;r++)a=n[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var o=r.createContext({}),p=function(e){var t=r.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},c=function(e){var t=p(e.components);return r.createElement(o.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var a=e.components,i=e.mdxType,n=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(a),f=i,y=d["".concat(o,".").concat(f)]||d[f]||u[f]||n;return a?r.createElement(y,l(l({ref:t},c),{},{components:a})):r.createElement(y,l({ref:t},c))}));function y(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var n=a.length,l=new Array(n);l[0]=f;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[d]="string"==typeof e?e:i,l[1]=s;for(var p=2;p<n;p++)l[p]=a[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,a)}f.displayName="MDXCreateElement"},66736:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>n,metadata:()=>s,toc:()=>p});var r=a(87462),i=(a(67294),a(3905));const n={id:"5df60b1d04286364bc92deac",number:"664",hasDraft:"1",collectionId:"566dfabbc6979143615564bf",popularity:"0.2",publicUrl:"https://docs.gravitykit.com/article/664-modifying-search-bar-inputs",viewCount:"1214",lastPublishedAt:"2019-12-15T15:05:38Z",changeOrigin:"unknown",name:"Modifying Search Bar Inputs",slug:"664-modifying-search-bar-inputs",status:"published",categories:["566dff159033603f7da27def","579aa76f903360293603a8e7","579aa642c6979160ca148ba9"],keywords:["filters","search","input"],createdBy:"166583",createdAt:"2019-12-15T10:29:49Z",updatedBy:"80506",updatedAt:"2022-10-12T21:58:10Z",title:"Modifying Search Bar Inputs",hsEditUrl:"https://secure.helpscout.net/docs/566dfabbc6979143615564bf/article/5df60b1d04286364bc92deac",pagination_prev:null,pagination_next:null,last_update:{date:new Date("2022-10-12T21:58:10.000Z"),author:"Rafael Ehlers"}},l="Modifying Search Bar Inputs",s={unversionedId:"gravity-forms-add-ons/gravityview/search/5df60b1d04286364bc92deac",id:"gravity-forms-add-ons/gravityview/search/5df60b1d04286364bc92deac",title:"Modifying Search Bar Inputs",description:"The Search Bar input fields can be customized using several filters that are available in GravityView.",source:"@site/docs/gravity-forms-add-ons/gravityview/search/664-modifying-search-bar-inputs.mdx",sourceDirName:"gravity-forms-add-ons/gravityview/search",slug:"/gravity-forms-add-ons/gravityview/search/664-modifying-search-bar-inputs",permalink:"/gravity-forms-add-ons/gravityview/search/664-modifying-search-bar-inputs",draft:!1,editUrl:"https://github.com/GravityKit/Docs/tree/main/docs/gravity-forms-add-ons/gravityview/search/664-modifying-search-bar-inputs.mdx",tags:[],version:"current",sidebarPosition:664,frontMatter:{id:"5df60b1d04286364bc92deac",number:"664",hasDraft:"1",collectionId:"566dfabbc6979143615564bf",popularity:"0.2",publicUrl:"https://docs.gravitykit.com/article/664-modifying-search-bar-inputs",viewCount:"1214",lastPublishedAt:"2019-12-15T15:05:38Z",changeOrigin:"unknown",name:"Modifying Search Bar Inputs",slug:"664-modifying-search-bar-inputs",status:"published",categories:["566dff159033603f7da27def","579aa76f903360293603a8e7","579aa642c6979160ca148ba9"],keywords:["filters","search","input"],createdBy:"166583",createdAt:"2019-12-15T10:29:49Z",updatedBy:"80506",updatedAt:"2022-10-12T21:58:10Z",title:"Modifying Search Bar Inputs",hsEditUrl:"https://secure.helpscout.net/docs/566dfabbc6979143615564bf/article/5df60b1d04286364bc92deac",pagination_prev:null,pagination_next:null,last_update:{date:"2022-10-12T21:58:10.000Z",author:"Rafael Ehlers"}},sidebar:"gravityview"},o={},p=[{value:"Searchable Fields",id:"searchable-fields",level:3},{value:"Input Types",id:"input-types",level:3},{value:"Input Templates",id:"input-templates",level:3},{value:"Search Filters",id:"search-filters",level:3}],c={toc:p},d="wrapper";function u(e){let{components:t,...a}=e;return(0,i.kt)(d,(0,r.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"modifying-search-bar-inputs"},"Modifying Search Bar Inputs"),(0,i.kt)("p",null,"The Search Bar input fields can be customized using several filters that are available in GravityView."),(0,i.kt)("h3",{id:"searchable-fields"},"Searchable Fields"),(0,i.kt)("p",null,"By default, all fields except File Upload, Post Image, Post ID and Section (Page) fields are searchable. This list is controlled by the ",(0,i.kt)("inlineCode",{parentName:"p"},"gravityview_blacklist_field_types")," filter. Adding special/meta fields to the searchable fields can be done via the ",(0,i.kt)("inlineCode",{parentName:"p"},"gravityview/search/searchable_fields")," filter. This is also the filter that allows developers to set a search input group type (see Input Types section below)."),(0,i.kt)("p",null,"An example where a special meta key needs to be output as search follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"add_filter( 'gravityview/search/searchable_fields', function( $fields ) {\n   $fields['mymeta'] = array(\n       'text' => 'Entry Color',\n       'type' => 'color',\n   );\n   return $fields;\n} );\n")),(0,i.kt)("p",null,"Not that the ",(0,i.kt)("inlineCode",{parentName:"p"},"type")," will get mapped to specific HTML input types and templates in the Search Bar (see Input Templates section below). It can be one of the default input types (See Input Types section below) or a custom input type."),(0,i.kt)("h3",{id:"input-types"},"Input Types"),(0,i.kt)("p",null,"By default, every searchable field is output as a simple text input. There are several exceptions to this rule. Date field types are output as dates or date range inputs, a boolean type (true/false) is output as a checkbox, select and multiselect field types are output as radios, links, checkboxes or dropdowns. More may be added as GravityView is developed."),(0,i.kt)("p",null,"There are 9 input types that are available by default. These are text, date, date range, select, multiselect, radio, checkbox, single checkbox, link. These all map to specific templates (see Input Templates section below). Adding a custom input type (for example a color picker, continuing the example above) involves several steps."),(0,i.kt)("p",null,"First of all, by using the ",(0,i.kt)("inlineCode",{parentName:"p"},"gravityview/search/input_labels")," filter the color picker input needs to be declared:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"add_filter( 'gravityview/search/input_labels', function( $labels ) {\n   $labels['colorpicker'] = 'Color Picker';\n   return $labels;\n}\n")),(0,i.kt)("p",null,"Next, the ",(0,i.kt)("inlineCode",{parentName:"p"},"gravityview/search/input_types")," filter should be used to create a new map between a new searchable field type (or an existing one) and an input type declared in the previous field (or an existing one):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"add_filter( 'gravityview/search/input_types', function( $types ) {\n   $types['date'][] = 'text_input';\n   $types['color'] = array( 'colorpicker', 'select', 'radio' );\n   return $types;\n} );\n")),(0,i.kt)("p",null,"In the example above, date type fields allow text input search to be set, and the custom color fields are set to be either colorpickers, select or radio input types."),(0,i.kt)("p",null,"It is important to note, however, that these input types do not directly map to a Gravity Forms field type. These map to a specific input template, which we will cover in the next section."),(0,i.kt)("h3",{id:"input-templates"},"Input Templates"),(0,i.kt)("p",null,"Input templates are located in ",(0,i.kt)("em",{parentName:"p"},"/wp-content/plugins/gravityview/includes/widgets/search-widget/templates/")," these can be overridden by copying them over to your ",(0,i.kt)("em",{parentName:"p"},"/wp-content/themes/theme/gravityview/")," directory. If you've created your own input type (colorpicker from the above examples, for instance) you'll need to create a template for it. You can either register your own template path for it by using the ",(0,i.kt)("inlineCode",{parentName:"p"},"gravityview_template_paths")," filter or place it into your ",(0,i.kt)("em",{parentName:"p"},"/wp-content/themes/theme/gravityview/")," directory."),(0,i.kt)("h3",{id:"search-filters"},"Search Filters"),(0,i.kt)("p",null,'Your custom input field should have an HTML input with the name of "filter',"_","ID\", where ID is the field ID you're needing to filter. Custom filter logic can be injected via ",(0,i.kt)("inlineCode",{parentName:"p"},"gravityview/view/query")," as well."))}u.isMDXComponent=!0}}]);